
package org.example

    fun main() {
        // Вызываем функцию, хранящуюся в переменной `messageFunction`, с аргументом "Васька".
        println(messageFunctionIt("Шарик"))
        // Выводит Шарик! Добро пожаловать в 2024 год

        // Функция messageFunctionIt вызывается с аргументом "Шарик".
        // Ключевое слово it заменяется на "Шарик", и результирующая строка "Шарик! Добро пожаловать в 2024 год" передается в функцию println.
        // Функция println выводит строку на экран.

        println(charNumberIt)
        // Выводит 1

        println(charNumberItOne)
        // Выводит 1
    }

    // Объявляем переменную `messageFunctionIt`, которая будет содержать анонимную функцию.
    // Указываем тип переменной: `(String) -> String`, что означает, что это функция,
    // принимающая один аргумент типа String и возвращающая значение типа String.
    val messageFunctionIt: (String) -> String = {
        // Объявляем переменную year и присваиваем ей значение 2024.
        val year = 2024
        // Используем ключевое слово `it`, чтобы сослаться на аргумент функции.
        "$it! Добро пожаловать в $year год"
    }
    // Переменная messageFunctionIt объявляется с типом (String) -> String, что означает,
    // что она будет хранить функцию, принимающую один аргумент типа String и возвращающую значение типа String.
    // Внутри фигурных скобок {} начинается тело анонимной функции.
    // Объявляется переменная year и ей присваивается значение 2024.
    // Используется ключевое слово it, чтобы сослаться на аргумент функции.
    // Результат выражения "${it}! Добро пожаловать в $year год" возвращается как результат выполнения функции.

    // Пример использования it с функцией count с явным указанием параметра
    val charNumberIt = "Шарик".count { it -> it == 'а' }
    // Функция count принимает анонимную функцию в качестве аргумента.
    // Анонимная функция использует it для ссылки на текущий символ строки.
    // Лямбда-выражение it -> it == 'а' проверяет, равен ли символ 'а'.
    // Функция count возвращает количество символов 'а'.

    // Оптимизированный вариант
    val charNumberItOne = "Шарик".count { it == 'а' }
    // Лямбда-выражение it == 'а' остается таким же, но синтаксис становится более компактным.
