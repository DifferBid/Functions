
package org.example


    fun main() {
        // Вызов функции с различным количеством аргументов
        printNumbers(1, 2, 3, 4, 5)
        // Вывод: 1, 2, 3, 4, 5
        printNumbers(4)
        // Вывод: 4

        // Вызов функции
        printNumbersWithPrefix("Number:", 1, 2, 3) // Вывод: Number: 1, Number: 2, Number: 3

        // Использование vararg с массивом
        // Но простое добавление массива Kotlin не пропустит. Следует использовать специальный оператор *.
        // Который распаковывает массив в vararg-параметры.
        // Создаем массив целых чисел
        val intArray: IntArray = intArrayOf(6, 7, 8, 9)

        // Вызов функции с vararg и распаковкой массива
        printNumbers(1, 2, 3, 4, 5, *intArray)
        // Вывод: 1, 2, 3, 4, 5, 6, 7, 8, 9

        /** Важные моменты
        * - Позиция vararg-параметра:Параметры vararg должны быть последними в списке параметров функции.
        *   Исключением могут быть случаи, когда вы используете именованные параметры, но это может запутать код.
        * - Распаковка массива: Если у вас уже есть массив и вы хотите передать его в функцию с vararg,
        *   используйте оператор распаковки - "*".
        */

    }

// Создадим функцию, которая принимает переменное количество целых чисел и выводит их на экран
    // Функция, принимающая переменное число целых чисел
    fun printNumbers(vararg integers: Int) {
        // Перебираем и выводим каждый элемент из vararg
        for (number in integers) {
            println("$number")
        }
    }

    // Использование vararg с другими параметрами
    // Если функция имеет другие параметры, они должны быть указаны до vararg.
    // Функция с обычным параметром и vararg
    fun printNumbersWithPrefix(prefix: String, vararg integers: Int) {
        for (number in integers) {
            println("$prefix $number")
        }
    }