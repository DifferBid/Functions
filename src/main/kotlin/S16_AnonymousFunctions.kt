
package org.example

    fun main() {

        println(variableA(4))
        // Выводит 7

        println(charNumber)
        // Выводит 8

        // Выводим количество символов 'а' в строке "Владимир".
        println(charNumberOne)
        // Выводит 1

        // Выводим количество символов 'а' в строке "Владимир".
        println(charNumberTwo)
        // Выводит 1
    }

    // Объявляем переменную `variableA`, которая будет содержать анонимную функцию.
    // Указываем тип переменной: `(Int) -> Int`, что означает, что это функция,
    // принимающая один аргумент типа Int и возвращающая значение типа Int.
    val variableA: (Int) -> Int = fun(i: Int): Int = i + 3
    // Определяем анонимную функцию с использованием ключевого слова `fun`.
    // Тело функции: возвращаем результат выражения `i + 3`.

    // Подсчет всех символов в строке
    val charNumber = "Владимир".count()


    // Функция count принимает анонимную функцию в качестве аргумента.
    // Анонимная функция определяет правило для подсчета символов 'а'.
    val charNumberOne = "Владимир".count( fun(letter: Char): Boolean {
            // Определяем анонимную функцию с использованием ключевого слова `fun`.
            // Проверяем, равен ли текущий символ 'а'.
            return letter == 'а'
        }
    )
    // Функция count принимает функцию типа (Char) -> Boolean в качестве аргумента.
    // Мы используем ключевое слово fun для определения анонимной функции.
    // Функция принимает один параметр letter типа Char и возвращает значение типа Boolean.
    // В теле функции проверяем, равен ли текущий символ letter символу 'а' и возвращаем результат этой проверки.
    //
    // Вызов функции count():
    // Функция count проходит по каждому символу строки и передает его в анонимную функцию.
    // Анонимная функция возвращает true для символов 'а', поэтому функция count возвращает количество таких символов.


    // Функция count принимает лямбда-выражение в качестве аргумента.
    // Лямбда-выражение определяет правило для подсчета символов 'а'.
    val charNumberTwo = "Владимир".count { letter ->
        // Лямбда-выражение: проверяем, равен ли текущий символ 'а'.
        letter == 'а'
    }
    // Функция count():
    // Функция count принимает лямбда-выражение как аргумент. Это лямбда-выражение определяет правило для подсчета символов.
    // Лямбда-выражение внутри count():
    // Лямбда-выражение { letter -> letter == 'а' } проверяет каждый символ строки.
    // Если символ равен 'а', лямбда-выражение возвращает true, и функция count увеличивает счетчик.
    // Вызов функции count():
    // Функция count проходит по каждому символу строки и передает его в лямбда-выражение.
    // Лямбда-выражение возвращает true для символов 'а', поэтому функция count возвращает количество таких символов.

    /** Лямбда-выражения в Kotlin имеют более компактный синтаксис по сравнению с анонимными функциями.
     *  Они заключены в фигурные скобки {}, параметры и тело функции разделены стрелкой ->.
     *  Лямбда-выражения часто используются в стандартной библиотеке Kotlin для задания кратковременных правил обработки данных,
     *  таких как фильтрация или подсчет.
     */

